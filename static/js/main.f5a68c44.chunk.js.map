{"version":3,"sources":["index.js"],"names":["Square","props","name","value","style","highlight","className","onClick","Board","i","lines","this","key","includes","squares","renderSquare","React","Component","Game","state","Array","fill","xIsNext","slice","calculateWinner","winner","setState","status","winInfo","every","element","handleClick","class","restart","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kMAKA,SAASA,EAAOC,GAEZ,IAAMC,EAAO,WAA4B,MAAhBD,EAAME,MAAgB,aAAe,IACxDC,EAASH,EAAMI,UAAaH,EAAK,OAASA,EAChD,OACE,4BAAQI,UAAWF,EAAOG,QAASN,EAAMM,SACtCN,EAAME,O,IAKPK,E,qLACSC,GAAI,IAAD,OACRC,EAAQC,KAAKV,MAAMS,MACzB,OACE,kBAACV,EAAD,CACEY,IAAMH,EACNJ,UAAaK,GAASA,EAAMG,SAASJ,GACrCN,MAAOQ,KAAKV,MAAMa,QAAQL,GAC1BF,QAAS,kBAAM,EAAKN,MAAMM,QAAQE,Q,+BAMtC,OACE,6BACE,yBAAKH,UAAU,aACZK,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,IAErB,yBAAKT,UAAU,aACZK,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,IAErB,yBAAKT,UAAU,aACZK,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,GAClBJ,KAAKI,aAAa,S,GA7BTC,IAAMC,WAoCpBC,E,YACJ,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXL,QAASM,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,yEAQPb,GACV,IAAMK,EAAUH,KAAKQ,MAAML,QAAQS,QACnBC,EAAgBV,GACpBW,QAAUX,EAAQL,KAG9BK,EAAQL,GAAKE,KAAKQ,MAAMG,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZZ,QAASA,EACTQ,SAAUX,KAAKQ,MAAMG,a,gCAKzBX,KAAKe,SAAS,CACVZ,QAASM,MAAM,GAAGC,KAAK,U,+BAIjB,IAMJM,EANG,OACDb,EAAUH,KAAKQ,MAAML,QAAQS,QAC7BK,EAAUJ,EAAgBV,GAC1BW,EAASG,EAAQH,OAcvB,OATEE,EADEF,EACO,WAAaA,EAEb,iBAAmBd,KAAKQ,MAAMG,QAAU,IAAM,KAEtDR,EAAQe,OAAM,SAAAC,GAAO,OAAe,MAAXA,OAAqBL,IAC9CE,EAAS,wBAKV,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACE,EAAD,CACEM,QAASA,EACTP,QAAS,SAAAE,GAAC,OAAI,EAAKsB,YAAYtB,IAC/BC,MAASkB,EAAQlB,SAGrB,yBAAKJ,UAAU,aACb,6BAAMqB,GACN,4BAAQK,MAAM,UAASzB,QAAU,kBAAK,EAAK0B,YAA3C,iB,GAxDSjB,IAAMC,WAmEzB,SAASO,EAAgBV,GAWvB,IAVA,IAAMJ,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAD,EAAI,EAAGA,EAAIC,EAAMwB,OAAQzB,IAAK,CAAC,IAAD,cACnBC,EAAMD,GADa,GAC9B0B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GACpE,MAAM,CAAEZ,OAAQX,EAAQqB,GACtBzB,MAAOA,EAAMD,IAGnB,MAAO,CACLgB,OAAQ,KACRf,MAAO,MAtBX4B,IAASC,OAAO,kBAACrB,EAAD,MAAUsB,SAASC,eAAe,U","file":"static/js/main.f5a68c44.chunk.js","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n\n    const name = \"square \"+ (props.value === 'X' ? \"squareBlue\" : \"\");\n    const style = (props.highlight) ? name+\" box\" : name;\n    return (  \n      <button className={style} onClick={props.onClick}  >\n        {props.value}\n      </button>\n    );\n  }\n  \n  class Board extends React.Component {\n    renderSquare(i) {\n      const lines = this.props.lines;\n      return (\n        <Square\n          key ={i}\n          highlight = {lines && lines.includes(i)}\n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n        />\n      );\n    }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(9).fill(null),\n        xIsNext: true\n      };\n    }\n  \n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      const winInfo = calculateWinner(squares);\n      if (winInfo.winner || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext\n      });\n    }\n  \n   restart(){\n    this.setState({\n        squares: Array(9).fill(null),\n\n   })}\n  \n    render() {\n      const squares = this.state.squares.slice();\n      const winInfo = calculateWinner(squares);\n      const winner = winInfo.winner;\n   \n  \n      let status;\n      if (winner) {\n        status = \"Winner: \" + winner;\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n      if(squares.every(element => element != null) && !winner){\n         status = \"Game ended in a draw\";\n       }\n        \n  \n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              onClick={i => this.handleClick(i)}\n              lines = {winInfo.lines}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <button class=\"restart\"onClick ={()=> this.restart()}>Restart</button>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\n  \n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return{ winner: squares[a],\n          lines: lines[i],\n      };\n    }}\n    return {\n      winner: null,\n      lines: null,\n    };\n  }\n  \n  \n  "],"sourceRoot":""}